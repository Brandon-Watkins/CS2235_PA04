/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs2235;

import edu.isu.cs2235.structures.implementations.FillTree;
import edu.isu.cs2235.structures.implementations.Trie;
import edu.isu.cs2235.structures.implementations.TrieNode;
import org.junit.Test;

import java.io.*;
import java.util.ArrayList;

import static org.junit.Assert.*;

/**
 * @author Brandon Watkins
 */
public class AppTest {

    boolean out = false;// Turn on/off the print statements, to more easily see what's going on.

    @Test public void testReadingAFile() throws IOException {
        BufferedReader fileReader = new BufferedReader(new FileReader(System.getProperty("user.dir") + "\\data\\words.txt"), 50000);
        String[] words = new String[3];
        String[] expected = new String[3];
        expected[0] = "a";
        expected[1] = "a-";
        expected[2] = "A&M";
        for(int i = 0; i < 3; i++){
            words[i] = fileReader.readLine().trim();
        }
        fileReader.close();
        assertArrayEquals("Read-in strings don't match expected.", words, expected);
    }

    @Test public void testBuildingATree() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = (Trie)fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        BufferedReader fileReader = new BufferedReader(new FileReader(System.getProperty("user.dir") + "\\data\\words.txt"), 50000);
        String currentWord;
        for(int i = 0; i < 3; i++){
            if(fileReader.ready() && (currentWord = fileReader.readLine()) != null){
                currentWord = currentWord.trim();
                while(currentWord.endsWith("-")){
                    currentWord = fileReader.readLine();
                    currentWord = currentWord.trim();
                }
                currentWord = currentWord.toLowerCase();
                String storedWord = "";
                TrieNode pointer = tree.root().firstChild();
                for (int j = 0; j < currentWord.length() && pointer != null; j++){
                    while (pointer.value() < currentWord.charAt(j)){
                        pointer = pointer.next();
                    }
                    if (pointer.value() == currentWord.charAt(j)) {
                        storedWord += pointer.value();
                        pointer = pointer.firstChild();
                    }
                }
                if (out) System.out.println("buildingATree: Expected " + currentWord + ". Found " + storedWord + ".");
                assertEquals("Expected: '" + currentWord + "', but found: '" + storedWord + "'.", currentWord, storedWord);
            }
        }
        fileReader.close();
        if (out) System.out.println("");
    }

    @Test public void testFind() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        TrieNode pointer;
        //test finding a single-letter string with no given pointer.
        pointer = tree.find("b");
        if (out) System.out.print("find(b): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert(pointer.value() == 'b');
        //find a single-letter string with a pointer
        pointer = tree.find("r", pointer);
        if (out) System.out.print("find(r), path(b): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert(pointer.value() == 'r');
        //find a character with a pointer
        pointer = tree.find('a', pointer);
        if (out) System.out.print("find(a), path(br): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert(pointer.value() == 'a');
        //make sure the legit pointer works
        tree.pointer(pointer);
        pointer = tree.find('n', tree.pointer());
        if (out) System.out.print("find(n), path(bra): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert(pointer.value() == 'n');
        //find a multi-letter string with a pointer. tests TrieNode's toString() and compareTo().
        pointer = tree.find("don", pointer);
        if (out) System.out.print("find(don), path(bran): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert((pointer.toString()).compareTo("brandon") == 0);
        //handles weird caps
        pointer = tree.find("BraNdon");
        if (out) System.out.print("find(braNdon): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert((pointer.toString()).compareTo("brandon") == 0);
        //handles extra spaces
        pointer = tree.find("  Brandon");
        if (out) System.out.print("find(  Brandon): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert((pointer.toString()).compareTo("brandon") == 0);
        //handles extra spaces mid word, if desired... Should only be searching for 1 word at a time, anyway.
        pointer = tree.find("Bra ndon");
        if (out) System.out.print("find(Bra ndon): ");
        if (out) System.out.println(pointer);
        assert(pointer != null);
        assert((pointer.toString()).compareTo("brandon") == 0);
        //handles searching for a non-existent word ("zbrandon")
        pointer = tree.root().lastChild();
        pointer = tree.find("brandon", pointer);
        if (out) System.out.print("find(brandon), path(z): ");
        if (out) System.out.println(pointer);
        assert(pointer == null);
        //handles misc symbols that might(but shouldn't) pop up. Can't read these in from a file, though.
        pointer = tree.find("α");
        if (out) System.out.print("find(α): ");
        if (out) System.out.println(pointer);
        assert(pointer == null);
        if (out) System.out.println("");
    }

    @Test public void testFindExtraMiddle() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        //find 3 extra letters
        String word = tree.findExtraMiddle("branrotdon");
        if (out) System.out.print("findExtraMiddle(branrotdon): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("brandon") == 0);
        //find 1 extra letter
        word = tree.findExtraMiddle("branrdon");
        if (out) System.out.print("findExtraMiddle(branrdon): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("brandon") == 0);
        //shouldnt find 4 extra letters
        word = tree.findExtraMiddle("branrotydon");
        if (out) System.out.print("findExtraMiddle(branrotydon): ");
        if (out) System.out.println(word);
        assert(word == null);
        if (out) System.out.println("");
    }

    @Test public void testFindMissingMiddle() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        //find 1 extra letter
        String word = tree.findMissingMiddle("missisippi");
        if (out) System.out.print("findMissingMiddle(missisippi): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("mississippi") == 0);
        //find 3 extra letters
        word = tree.findMissingMiddle("missippi");
        if (out) System.out.print("findMissingMiddle(missippi): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("mississippi") == 0);
        //should return null if no other words can be found
        word = tree.findMissingMiddle("mississippi");
        if (out) System.out.print("findMissingMiddle(mississippi): ");
        if (out) System.out.println(word);
        assert(word == null);
        if (out) System.out.println("");
    }

    @Test public void testFindExtraPrefix() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        //find 3 extra letters
        String word = tree.findExtraPrefix("poybrandon");
        if (out) System.out.print("findExtraPrefix(poybrandon): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("brandon") == 0);
        //find 1 extra letter
        word = tree.findExtraPrefix("pbrandon");
        if (out) System.out.print("findExtraPrefix(pbrandon): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("brandon") == 0);
        //shouldnt find a word
        word = tree.findExtraPrefix("branrotdon");
        if (out) System.out.print("findExtraPrefix(branrotdon): ");
        if (out) System.out.println(word);
        assert(word == null);
        //shouldnt find a word
        word = tree.findExtraPrefix("poytbrandon");
        if (out) System.out.print("findExtraPrefix(poytbrandon): ");
        if (out) System.out.println(word);
        assert(word == null);
        if (out) System.out.println("");
    }

    @Test public void testFindMissingPrefix() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        //find 1 missing letter
        String word = tree.findMissingPrefix("randon");
        if (out) System.out.print("findMissingPrefix(randon): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("brandon") == 0);
        //find 3 missing letters
        word = tree.findMissingPrefix("sissippi");
        if (out) System.out.print("findMissingPrefix(sissippi): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("mississippi") == 0);
        //shouldnt find a word
        word = tree.findMissingPrefix("branrotdon");
        if (out) System.out.print("findMissingPrefix(branrotdon): ");
        if (out) System.out.println(word);
        assert(word == null);
        //shouldnt find a word
        word = tree.findMissingPrefix("mississippi");
        if (out) System.out.print("findMissingPrefix(mississippi): ");
        if (out) System.out.println(word);
        assert(word == null);
        if (out) System.out.println("");
    }

    @Test public void testFindExtraSuffix() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        //find 3 extra letters
        String word = tree.findExtraSuffix("brandonpoy");
        if (out) System.out.print("findExtraSuffix(brandonpoy): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("brandon") == 0);
        //find 1 extra letter
        word = tree.findExtraSuffix("brandonp");
        if (out) System.out.print("findExtraSuffix(brandonp): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("brandon") == 0);
        //shouldnt find a word
        word = tree.findExtraSuffix("branrotdon");
        if (out) System.out.print("findExtraSuffix(branrotdon): ");
        if (out) System.out.println(word);
        assert(word == null);
        //shouldnt find a word
        word = tree.findExtraSuffix("poytbrandon");
        if (out) System.out.print("findExtraSuffix(poytbrandon): ");
        if (out) System.out.println(word);
        assert(word == null);
        if (out) System.out.println("");
    }

    @Test public void testFindMissingSuffix() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        //find 1 missing letter
        String word = tree.findMissingSuffix("mississipp");
        if (out) System.out.print("findMissingSuffix(mississipp): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("mississippi") == 0);
        //find 3 missing letters
        word = tree.findMissingSuffix("mississi");
        if (out) System.out.print("findMissingSuffix(mississi): ");
        if (out) System.out.println(word);
        assert(word != null);
        assert(word.compareTo("mississippi") == 0);
        //shouldnt find a word
        word = tree.findMissingSuffix("branrotdon");
        if (out) System.out.print("findMissingSuffix(branrotdon): ");
        if (out) System.out.println(word);
        assert(word == null);
        //shouldnt find a word
        word = tree.findMissingSuffix("poytbrandon");
        if (out) System.out.print("findMissingSuffix(poytbrandon): ");
        if (out) System.out.println(word);
        assert(word == null);
        if (out) System.out.println("");
    }

    @Test public void testFindWord() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        boolean found = tree.findWord("brandon");
        assert(found == true);
        found = tree.findWord("Brandon");
        assert(found == true);
        found = tree.findWord("Bra ndon");
        assert(found == true);
        found = tree.findWord("branon");
        assert(found == false);
        found = tree.findWord("");
        assert(found == false);
        found = tree.findWord(" ");
        assert(found == false);
    }

    @Test public void testSuggestionsOutput() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        String word = "calc";
        ArrayList<String> suggestions = new ArrayList<>();
        String suggestion;
        if((suggestion = tree.findExtraPrefix(word)) != null) suggestions.add(suggestion);
        if((suggestion = tree.findMissingPrefix(word)) != null) suggestions.add(suggestion);
        if((suggestion = tree.findExtraSuffix(word)) != null) suggestions.add(suggestion);
        if((suggestion = tree.findMissingSuffix(word)) != null) suggestions.add(suggestion);
        if((suggestion = tree.findMissingMiddle(word)) != null) suggestions.add(suggestion);
        if(suggestions.size() < 5 && (suggestion = tree.findExtraMiddle(word)) != null) suggestions.add(suggestion);
        for(int i = 0; i < suggestions.size(); i++) assert(suggestions.get(i) instanceof String);

        if (out) System.out.println("Suggestions for " + word + ": ");
        if (out) for(int i = 0; i < suggestions.size();i++) System.out.println(suggestions.get(i));
        if (out) System.out.println("");
    }

    @Test public void testAddingWordsToTree() throws IOException {
        FillTree fillTree = new FillTree();
        Trie tree = fillTree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");
        String word = "gibber-freaking-ish";
        assert(tree.findWord(word) == false);
        tree.add(word);
        assert(tree.findWord(word) == true);
        if (out) System.out.println("");
    }


}
