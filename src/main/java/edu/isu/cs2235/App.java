/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs2235;

import edu.isu.cs2235.structures.implementations.Trie;
import edu.isu.cs2235.structures.implementations.FillTree;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * a simple spellchecker program utilizing a trie.
 * @author Brandon Watkins
 */
public class App {
    private Trie tree;
    private String[] inputs;
    private String[] args;

    public App(String[] args) throws Exception {
        this.args = args;
        this.fillTree();
        this.userStringInput();
    }

    public static void main(String[] args) throws Exception {
        App app = new App(args);
    }


    /**
     * Reads the word list file into a trie. Including several word lists to choose from.
     * @throws IOException when the BufferedReader has an issue reading the file.
     */
    public void fillTree() throws IOException {
        FillTree tree = new FillTree();

        //largest word list, lots of abbreviations and acronyms though - 464,677 words
        //this.tree = tree.readInFile(System.getProperty("user.dir") + "\\data\\words.txt");

        //same as largest, minus words with dashes and apostrophes - 370,074 words
        //this.tree = tree.readInFile(System.getProperty("user.dir") + "\\data\\words_alpha.txt");

        //seems to be a more normal word list - 370,076 words
        //this.tree = tree.readInFile(System.getProperty("user.dir") + "\\data\\words_dictionary.json");

        //smallest word list - 77,698 words
        this.tree = tree.readInFile(System.getProperty("user.dir") + "\\data\\wordList.txt");
    }

    /**
     * The main part of the app, that handles getting the string to spell check from the user.
     * @throws Exception when Scanner has an issue.
     */
    public void userStringInput() throws Exception {
        boolean anotherString = true;
        Scanner inputReader = new Scanner(System.in);
        while(anotherString) {
            String in = checkForInput(inputReader);
            this.inputs = in.split("\\s+");
            if (inputs == null || inputs.length == 0 || inputs[0] == null || inputs[0].length() == 0) continue;
            if (inputs[0].compareTo("-1") != 0) {
                System.out.println("\r\nChecking spelling...");
                giveUserSuggestions(inputReader);
                displayCorrectedString();
            } else {
                System.out.println("\r\nGoodbye.");
                inputReader.close();
                anotherString = false;
                return;
            }
        }

    }

    public String checkForInput(Scanner inputReader){
        boolean usedArgs = false;
        if(this.args != null && this.args.length > 0) {
            System.out.println("\r\nUsed args[] for the string to spellcheck: ");
            usedArgs = true;
            StringBuilder argStr = new StringBuilder();
            for(int i = 0; i < this.args.length; i++) argStr.append(this.args[i]);
            System.out.println(argStr);
            inputReader = new Scanner(String.valueOf(argStr));
            this.args = null;
        }
        else {
            inputReader = new Scanner(System.in);
            System.out.println("\r\nEnter a string to spellcheck(or -1 to quit): ");
        }
        String in = inputReader.nextLine();
        if(usedArgs){
            if(in.hashCode() == 0){
                System.out.println("\r\nEnter a string to spellcheck(or -1 to quit): ");
            }
            inputReader.close();
            inputReader = new Scanner(System.in);
            usedArgs = false;
        }
        while(in.hashCode() == 0) {
            in = inputReader.nextLine();
        }
        return in;
    }

    /**
     * Checks each word from user's string input for misspellings. If it finds any, it informs the user, and then checks for
     * spelling suggestions, and gives them to the user to choose from.
     * @param inputReader The Scanner being used to record user input.
     * @throws Exception from userPickedSuggestion, if an invalid response got through.
     */
    public void giveUserSuggestions(Scanner inputReader) throws Exception {
        //for each word...
        for (int i = 0; i < this.inputs.length; i++) {
            String punctuation = "";
            if (this.inputs[i].endsWith(".") || this.inputs[i].endsWith("!") || this.inputs[i].endsWith("?") || this.inputs[i].endsWith(",")) {
                punctuation = this.inputs[i].substring(this.inputs[i].length() - 1);
                this.inputs[i] = this.inputs[i].substring(0, this.inputs[i].length() - 1);
            }
            if (this.inputs[i].hashCode() == 0) continue;
            //if word wasn't found (not spelled correctly)...
            if (this.tree.findWord(this.inputs[i].toLowerCase()) == false) {
                ArrayList<String> suggestions = this.tree.wordSuggestions(this.inputs[i].toLowerCase());
                String temp = "";
                if (i > 0) {
                    temp = "\"..." + this.inputs[i - 1] + " ";
                    temp = temp + this.inputs[i] + punctuation;
                    if (i < this.inputs.length - 1) temp = temp + " " + this.inputs[i + 1] + "...\"";
                    else temp = temp + "\"";
                }
                else {
                    if(i < this.inputs.length - 1) temp = "\"" + inputs[i] + punctuation + " " + inputs[i + 1] + "...\"";
                    else temp = "\"" + inputs[i] + "\"";
                }
                System.out.println("\r\nMisspelling found: \"" + this.inputs[i] + "\" in " + temp + "\r\nReplace with:");
                for (int j = 1; j <= suggestions.size(); j++) {
                    System.out.println(j + ". " + suggestions.get(j - 1));
                }
                String response = inputReader.nextLine();
                if (response == null || response.length() != 1 || Integer.valueOf(response.charAt(0)) < 48 || Integer.valueOf(response.charAt(0)) > 48 + suggestions.size()) {
                    System.out.println("\r\n" + response + " is not a valid response. Please Enter a number between 1 and " + suggestions.size() + ".");
                    i--;
                    continue;
                }
                int h = Integer.parseInt(response);
                userPickedSuggestion(i, suggestions, h, temp, punctuation, inputReader);
            }
        }
    }

    /**
     * Deals with the user's response regarding which suggested word they'd like to use. Replaces/skips the word, as told.
     * @param inputsIndex An index for the outer loop, keeping current word's place in the input string.
     * @param suggestions An ArrayList of suggestions the user could choose from.
     * @param response The user's suggestion decision.
     * @param oldContext The string containing the context ("... previousWord wordBeingChecked nextWord ..."), before any changes have been made.
     * @param punctuation Any(hopefully) punctuation that might have been on the end of the word. I removed it when spellchecking.
     * @param inputReader The scanner used for user input.
     * @throws Exception when an invalid response gets through.
     */
    public void userPickedSuggestion(int inputsIndex, ArrayList<String> suggestions, int response, String oldContext, String punctuation, Scanner inputReader) throws Exception {
        String temp = oldContext;
        if (suggestions.get(response - 1).compareTo("Ignore") == 0){
            System.out.println("Ignored \"" + this.inputs[inputsIndex] + "\" in " + temp);
            return;
        }
        else if (suggestions.get(response - 1).compareTo("Manual Entry") == 0) {
            System.out.print("Manual entry for \"" + this.inputs[inputsIndex] + "\": ");
            String manualWord = null;
            manualWord = inputReader.nextLine();
            if (manualWord.hashCode() != 0 && manualWord == null || manualWord.length() == 0) {
                userPickedSuggestion(inputsIndex, suggestions, response, temp, punctuation, inputReader);
                return;
            }
            if (this.tree.findWord(manualWord)) System.out.println("Added \"" + manualWord + "\" to word list.");// just to the trie's word list, not the file.
            this.tree.add(manualWord);
            this.inputs[inputsIndex] = manualWord + punctuation;
        }
        else if (response <= suggestions.size() - 2) this.inputs[inputsIndex] = suggestions.get(response - 1);
        else throw new Exception("Invalid response received.");

        String temp2 = "";
        if (inputsIndex > 0) {
            temp2 = "\"..." + this.inputs[inputsIndex - 1] + " ";
            temp2 = temp2 + this.inputs[inputsIndex] + punctuation;
            if (inputsIndex < this.inputs.length - 1) temp2 = temp2 + " " + this.inputs[inputsIndex + 1] + "...\"";
            else temp2 = temp2 + "\"";
        }
        else {
            if(inputsIndex < this.inputs.length - 1) temp2 = "\"" + inputs[inputsIndex] + punctuation + " " + inputs[inputsIndex + 1] + "...\"";
            else temp2 = "\"" + inputs[inputsIndex] + "\"";
        }
        System.out.println("Replaced " + temp + " with " + temp2);
    }

    /**
     * Displays the final spell-checked string.
     */
    public void displayCorrectedString(){
        System.out.println("\r\nSpelling check complete!");
        System.out.print("\r\nResults:");
        for (int i = 0; i < this.inputs.length; i++){
            System.out.print(" " + this.inputs[i]);
        }
        System.out.println("");
    }


}
